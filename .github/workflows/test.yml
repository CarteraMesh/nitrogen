# This is the main CI workflow that runs the test suite on all pushes to main and all pull requests.
# It runs the following jobs:
# - required: runs the test suite on ubuntu with stable and beta rust toolchains
# - minimal: runs the test suite with the minimal versions of the dependencies that satisfy the
#   requirements of this crate, and its dependencies
# - os-check: runs the test suite on mac and windows
# - coverage: runs the test suite and collects coverage information
# See check.yml for information about how the concurrency cancellation and workflow triggering works
permissions:
  contents: read
on:
  push:
    branches: [main]
  pull_request:
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: test
jobs:
  generate:
    runs-on: ${{ vars.RUNNER }}
    name: generate code
    steps:
      - uses: actions/checkout@v5
      - uses: ubicloud/rust-cache@v2
        with:
          cache-on-failure: "true"
          cache-all-crates: "true"
          cache-workspace-crates: "true"
          workspaces: |
            . -> target
          cache-bin: "true"
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: nitrogen-cli
        run: |
          ./scripts/gen.sh
  os-check:
    # run cargo test on mac and windows
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} / stable
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
    steps:
      # if your project needs OpenSSL, uncomment this to fix Windows builds.
      # it's commented out by default as the install command takes 5-10m.
      # - run: echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
      #   if: runner.os == 'Windows'
      # - run: vcpkg install openssl:x64-windows-static-md
      #   if: runner.os == 'Windows'
      - uses: actions/checkout@v5
        with:
          submodules: true
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo build
        run: cargo build --locked --all-features --all-targets
  coverage:
    runs-on: ${{ vars.RUNNER }}
    name: ubuntu / stable / coverage
    steps:
      - uses: actions/checkout@v5
      - uses: ubicloud/rust-cache@v2
        with:
          cache-on-failure: "true"
          cache-all-crates: "true"
          cache-workspace-crates: "true"
          workspaces: |
            . -> target
          cache-bin: "true"
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - name: cargo install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: nitrogen-instruction-builder (async)
        run: |
          cargo llvm-cov --package nitrogen-instruction-builder --lcov --output-path lcov-instruction-builder-async.info
      - name: nitrogen-instruction-builder (blocking)
        run: |
          cargo llvm-cov --package nitrogen-instruction-builder --features blocking --lcov --output-path lcov-instruction-builder-blocking.info
      - name: Record Rust version
        run: echo "RUST=$(rustc --version)" >> "$GITHUB_ENV"
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov-instruction-builder-async.info,lcov-instruction-builder-blocking.info
          flags: nitrogen-instruction-builder
          env_vars: OS,RUST
